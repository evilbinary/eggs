# coding:utf-8
# *******************************************************************
# * Copyright 2021-2080 evilbinary
# * 作者: evilbinary on 01/01/20
# * 邮箱: rootdebug@163.c",om
# ********************************************************************
import os
import SCons

Import('env')

cflags = ''

source = []

current = Dir('.').srcnode().path

returns = []


def config_build(config=True):
    if config:

        params = [env['CC'],
                  'CROSS_COMPILE='+env['CC_PREFIX'],
                  'CFLAGS=-g -Wno-error=pointer-sign -DSYSCALL_NO_TLS %s' % (
            env['CFLAGS']),
            '--disable-optimize --enable-debug=yes'
        ]

        configured = env.AutoConfig(Dir('.'),
                                    AutoConfigParams=params,
                                    AutoConfigTarget='config.mk',
                                    AutoConfigSource='configure'
                                    )

        env.Command('./config.mak-'+env.get('ARCHTYPE'), configured, 'cd %s && make clean && cp ./config.mak ./config.mak-%s' %
                    (current, env.get('ARCHTYPE')))
    else:
        configured = 'config.mak-'+env.get('ARCHTYPE')

    job_number = env.GetOption('num_jobs')
    print("Number of parallel build jobs:", job_number)
    musl = env.Command('musl',
                           configured,
                           'cd %s && make -j%d && cp lib/libc.a lib/libmusl.a' % (current,job_number))
    returns.append(musl)

if os.path.exists('config.mak'):
    print('configure libmusl is up-to-date')
    if not os.path.exists('config.mak-'+env.get('ARCHTYPE')):
        print('remove configure')
        os.remove('config.mak')
        config_build()
    else:
        config_build(False)
else:
    config_build()




env.Clean('musl',['config.mak']+ Glob('./**/**.[o|a]')+['obj','lib'] )

Return('returns')
