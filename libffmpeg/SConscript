# coding:utf-8
# *******************************************************************
# * Copyright 2021-2080 evilbinary
# * 作者: evilbinary on 01/01/20
# * 邮箱: rootdebug@163.c",om
# ********************************************************************
import os
import SCons

Import('env')

cflags = ' -L../libmusl/lib '

source = []

current = Dir('.').srcnode().path

returns = []

libpath = ' '.join(map(lambda i: ' -I'+i, env['CPPPATH'])).replace('#/', '')
libs = ''

ldflags = env['LINKFLAGS'] + \
    ' '.join(map(lambda i: '../libmusl/lib/'+i, env['LIBC']))

cflags += env['CFLAGS']


def patch_path(var):
    return var.replace(
        'eggs/libmusl', '../libmusl')


if env.get('MYLIB'):
    ldflags += ' '+env.get('CC_LIB_PATH') + env.get('MYLIB')
    libpath += ' -I'+env.get('CC_LIB_PATH')


def config_build():
    params = [
        '--enable-cross-compile',
        '--arch='+env['ARCHTYPE'],
        '--target-os=linux',
        '--cross-prefix='+env['CC_PREFIX'],
        '--extra-cflags=%s  %s %s' % (
            libpath, libs, cflags),
        '--extra-ldflags=%s ' % (ldflags),
        '--host-extralibs=',
        '--enable-gpl',
        '--enable-nonfree',
        '--enable-static',
        '--disable-programs',
        '--disable-stripping',
        '--disable-doc',
        '--disable-pthreads',
        '--disable-shared',
        '--disable-htmlpages',
        '--disable-manpages',
        '--disable-podpages',
        '--disable-txtpages',

        '--disable-encoders ',
        '--disable-decoders ',
        '--enable-decoder=aac',
        '--enable-decoder=aac_at',
        '--enable-decoder=h264',
        '--enable-decoder=h264_mediacodec',
        '--disable-demuxers ',
        '--enable-demuxer=aac',
        '--enable-demuxer=h264',

    ]

    params = map(patch_path, params)

    configured = env.AutoConfig(Dir('.'),
                                AutoConfigParams=params,
                                AutoConfigTarget='config.mk',
                                AutoConfigSource='configure'
                                )

    env.Command('./ffbuild/config.mak-'+env.get('ARCHTYPE'), configured, 'cd %s && make clean && cp ./ffbuild/config.mak ./ffbuild/config.mak-%s' %
                (current, env.get('ARCHTYPE')))
    musl = env.Command('ffmpeg',
                       configured,
                       'cd %s && make -j8' % (current))

    returns.append(musl)


if os.path.exists('ffbuild/config.mak'):
    print('configure is up-to-date')
    if not os.path.exists('ffbuild/config.mak-'+env.get('ARCHTYPE')):
        print('remove configure')
        os.remove('ffbuild/config.mak')
        config_build()
    env.Command('ffmpeg2',
                './ffbuild/config.mak-'+env.get('ARCHTYPE'),
                'cd %s && make -j8' % (current))
else:
    config_build()


Return('returns')
